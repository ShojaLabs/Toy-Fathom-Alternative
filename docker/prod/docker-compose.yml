services:
  # Note: If you are assigning a custom name to your db service on the line below, make sure it does not contain underscores
  db:
    env_file: "./../../.env.production"
    image: "postgres:latest"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      INIT_DB_LIST: ${INIT_DB_LIST}
    ports:
      - 5432:5432
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${AUTH_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - ./../../scripts/init_db.sh:/docker-entrypoint-initdb.d/entrypoint.sh
      - prod_pgdata:/var/lib/postgresql/data

  supertokens:
    env_file: "./../../.env.production"
    image: registry.supertokens.io/supertokens/supertokens-postgresql:9.0.2
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 3567:3567
    environment:
      POSTGRESQL_CONNECTION_URI: "postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${AUTH_DB}"
      NODE_ENV: "production"
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    env_file: "./../../.env.production"
    build:
      context: ../../
      dockerfile: docker/prod/Dockerfile
    environment:
      NODE_ENV: "production"
      SUPERTOKENS_CONNECTION_URI: "http://supertokens:3567"
      APP_DB_URL: "postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${APP_DB}"
    image: app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network
    ports:
      - 3000:3000

networks:
  app_network:
    driver: bridge

volumes:
  prod_pgdata:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./../../stacks/prod_db_data
